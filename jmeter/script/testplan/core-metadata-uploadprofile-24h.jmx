<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Performance Test - Metadata API" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NumberOfThread" elementType="Argument">
            <stringProp name="Argument.name">NumberOfThread</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - Delete Response File of Last Running" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer

//get current jmeter script&apos;s directory
def path = FileServer.getFileServer().getBaseDir()
def testdatapath= path + &quot;/../testdata/csv/&quot;
 
new File(testdatapath + &quot;res-deviceProfileID-YAML.csv&quot;).delete()</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Create Device Profile by Upload YAML" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(test.metadata.uploadYAML.threadNum)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(test.metadata.uploadYAML.rampUpPeriod)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(test.metadata.uploadYAML.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://${__P(influxdbHost)}:8086/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">metadata</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">uploadDeviceProfileYAML</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Device Profile by Upload YAML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"># Copyright 2017 Dell Inc. All rights reserved.&#xd;
name: &quot;Fischertechnik Punching-${__time()}&quot;&#xd;
model: &quot;Punching Machine&quot;&#xd;
labels: &#xd;
  - &quot;conveyer belt&quot;&#xd;
  - &quot;press&quot;&#xd;
  - &quot;punch&quot;&#xd;
description: &quot;Fischertechnik conveyer belt, punching machine, and belt detectors&quot;&#xd;
&#xd;
deviceResources:&#xd;
      -   &#xd;
        name: PunchingMachine&#xd;
        description: &quot;Punching Machine control, + for down, - for up&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;M1&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;Integer&quot;, readWrite: &quot;RW&quot;, size: &quot;1&quot;, minimum: &quot;-8&quot;, maximum: &quot;8&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Power Level&quot; }&#xd;
      -   &#xd;
        name: ConveyerBelt&#xd;
        description: &quot;Conveyer Belt speed control, + for right, - for left&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;M2&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;Integer&quot;, readWrite: &quot;RW&quot;, size: &quot;1&quot;, minimum: &quot;-8&quot;, maximum: &quot;8&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Power Level&quot; }&#xd;
      -   &#xd;
        name: BeltLights&#xd;
        description: &quot;Conveyer Belt Lights control for sensing blockages&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;M3&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;Integer&quot;, readWrite: &quot;RW&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;8&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Power Level&quot; }&#xd;
      -   &#xd;
        name: LeftBeltDetector&#xd;
        description: &quot;1 for clear, 0 for blocked while lights are on&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;I5&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;1&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Clear&quot; }&#xd;
      -   &#xd;
        name: RightBeltDetector&#xd;
        description: &quot;1 for clear, 0 for blocked while lights are on&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;I6&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;1&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Clear&quot; } &#xd;
      -   &#xd;
        name: PressUpperLimit&#xd;
        description: &quot;1 for punching press upper limit reached&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;I7&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;1&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Maxima&quot; }                &#xd;
      -   &#xd;
        name: PressLowerLimit&#xd;
        description: &quot;1 for punching press lower limit reached&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;I8&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;1&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Maxima&quot; }&#xd;
      -   &#xd;
        name: Safety&#xd;
        description: &quot;1 for conveyer belt and punching press safety enabled&quot;&#xd;
        attributes: &#xd;
            { interfaceName: &quot;S1&quot; }&#xd;
        properties: &#xd;
            value:&#xd;
                { type: &quot;Integer&quot;, readWrite: &quot;RW&quot;, size: &quot;1&quot;, minimum: &quot;0&quot;, maximum: &quot;1&quot; }&#xd;
            units:&#xd;
                { type: &quot;String&quot;, readWrite: &quot;R&quot;, defaultValue: &quot;Safety State&quot; }&#xd;
             &#xd;
resources:&#xd;
  -&#xd;
    name: BeltState&#xd;
    get:&#xd;
      - { index: &quot;1&quot;, operation: &quot;get&quot;, object: &quot;LeftBeltDetector&quot;, parameter: &quot;LeftBeltDetector&quot;, property: &quot;value&quot;, mappings: {&quot;0&quot;: &quot;Blocked&quot;, &quot;1&quot;: &quot;Clear&quot;} }&#xd;
      - { index: &quot;2&quot;, operation: &quot;get&quot;, object: &quot;RightBeltDetector&quot;, parameter: &quot;RightBeltDetector&quot;, property: &quot;value&quot;, mappings: {&quot;0&quot;: &quot;Blocked&quot;, &quot;1&quot;: &quot;Clear&quot;} }&#xd;
      - { index: &quot;3&quot;, operation: &quot;get&quot;, object: &quot;PressUpperLimit&quot;, parameter: &quot;PressUpperLimit&quot;, property: &quot;value&quot;, mappings: {&quot;0&quot;: &quot;In Bounds&quot;, &quot;1&quot;: &quot;Maxima Reached&quot;} }&#xd;
      - { index: &quot;4&quot;, operation: &quot;get&quot;, object: &quot;PressLowerLimit&quot;, parameter: &quot;PressLowerLimit&quot;, property: &quot;value&quot;, mappings: {&quot;0&quot;: &quot;In Bounds&quot;, &quot;1&quot;: &quot;Maxima Reached&quot;} }&#xd;
      - { index: &quot;5&quot;, operation: &quot;get&quot;, object: &quot;PunchingMachine&quot;, parameter: &quot;PunchingMachine&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;6&quot;, operation: &quot;get&quot;, object: &quot;ConveyerBelt&quot;, parameter: &quot;ConveyerBelt&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;7&quot;, operation: &quot;get&quot;, object: &quot;BeltLights&quot;, parameter: &quot;BeltLights&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;8&quot;, operation: &quot;get&quot;, object: &quot;Safety&quot;, parameter: &quot;Safety&quot;, property: &quot;value&quot; }&#xd;
    set:&#xd;
      - { index: &quot;1&quot;, operation: &quot;set&quot;, object: &quot;PunchingMachine&quot;, parameter: &quot;PunchingMachine&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;2&quot;, operation: &quot;set&quot;, object: &quot;ConveyerBelt&quot;, parameter: &quot;ConveyerBelt&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;3&quot;, operation: &quot;set&quot;, object: &quot;BeltLights&quot;, parameter: &quot;BeltLights&quot;, property: &quot;value&quot; }&#xd;
      - { index: &quot;4&quot;, operation: &quot;set&quot;, object: &quot;Safety&quot;, parameter: &quot;Safety&quot;, property: &quot;value&quot; }&#xd;
      &#xd;
  -&#xd;
    name: Init &#xd;
    set:&#xd;
      - { index: &quot;1&quot;, operation: &quot;set&quot;, object: &quot;BeltLights&quot;, parameter: &quot;8&quot;, property: &quot;value&quot; }   &#xd;
      - { index: &quot;2&quot;, operation: &quot;set&quot;, object: &quot;Safety&quot;, parameter: &quot;1&quot;, property: &quot;value&quot; }      &#xd;
                   &#xd;
commands: &#xd;
  - &#xd;
    name: BeltState&#xd;
    get: &#xd;
        path: &quot;/api/v1/device/{deviceId}/BeltState&quot;&#xd;
        responses: &#xd;
          - &#xd;
            code: &quot;200&quot;&#xd;
            description: &quot;Get the system state.&quot;&#xd;
            expectedValues: [&quot;PunchingMachine&quot;,&quot;PressUpperLimit&quot;,&quot;PressLowerLimit&quot;,&quot;ConveyerBelt&quot;,&quot;LeftBeltDetector&quot;,&quot;RightBeltDetector&quot;,&quot;BeltLights&quot;,&quot;Safety&quot;]&#xd;
          -&#xd;
            code: &quot;503&quot;&#xd;
            description: &quot;service unavailable&quot;&#xd;
            expectedValues: []&#xd;
    put:&#xd;
        path: &quot;/api/v1/device/{deviceId}/BeltState&quot;&#xd;
        parameterNames: [&quot;PunchingMachine&quot;,&quot;ConveyerBelt&quot;,&quot;BeltLights&quot;,&quot;Safety&quot;]&#xd;
        responses:&#xd;
          - &#xd;
            code: &quot;204&quot;&#xd;
            description: &quot;Set the motor states.&quot;&#xd;
            expectedValues: []&#xd;
          -&#xd;
            code: &quot;503&quot;&#xd;
            description: &quot;service unavailable&quot;&#xd;
            expectedValues: []</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(test.machine)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(test.metadata.port)}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/deviceprofile/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Save Profile ID to File" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer

//get current jmeter script&apos;s directory-
def path = FileServer.getFileServer().getBaseDir()
def testdatapath=path + &quot;/../testdata/csv/&quot;
 
new File(testdatapath + &quot;res-deviceProfileID-YAML.csv&quot;) &lt;&lt; prev.getResponseDataAsString() + System.getProperty(&quot;line.separator&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group - Delete All Created Device Profile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">../testdata/csv/res-deviceProfileID-YAML.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">deviceProfileID</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Device Profile" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(test.machine)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(test.metadata.port)}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/deviceprofile/id/${deviceProfileID}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
